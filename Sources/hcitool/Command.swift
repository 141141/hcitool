
//
//  Command.swift
//  hcitoolPackageDescription
//
//  Created by Marco Estrella on 3/26/18.
//

import Foundation
import Bluetooth

public enum CommandType: String {
    
    // Low Energy Scan
    case lowEnergyScan = "lescan"
    
    // iBeacon
    case iBeacon = "ibeacon"
    
    // Reads the Bluetooth controller's local name.
    case readLocalName = "readname"
    
    // Write the Bluetooth controller's local name.
    case writeLocalName = "writename"
    
    // Set the Bluetooth controller's random address
    case lowEnergySetRandomAddress = "setrandomaddress"
    
    // Clear the White List stored in the Controller.
    case lowEnergyClearWhiteList = "clearwhitelist"
    
    //  Cancel the LE_Create_Connection or LE_Extended_Create_Connection commands.
    case lowEnergyCreateConnectionCancel = "createconnectioncancel"
    
    // Requests the list of the supported LE features for the Controller.
    case lowEnergyReadLocalSupportedFeatures = "readlocalsupportedfeatures"
    
    // Controls which LE events are generated by the HCI for the Host.
    case lowEnergySetEventMask = "seteventmask"
    
    // Reads the maximum size of the data portion of HCI LE ACL Data Packets sent from the Host to the Controller.
    case lowEnergySetReadBufferSize = "setreadbuffersize"
    
    // Returns the current Channel_Map for the specified Connection_Handle.
    case lowEnergyReadChannelMap = "readchannelmap"
    
    //  Adds a single device to the White List stored in the Controller.
    case lowEnergyAddDeviceToWhiteList = "adddevicetowhitelist"
    
    //  Removes a single device from the White List stored in the Controller.
    case lowEnergyRemoveDeviceToWhiteList = "removedevicetowhitelist"
}

public enum Command {
    
    case iBeacon(iBeaconCommand)
    
    // Reads the Bluetooth controller's local name.
    case readLocalName
    
    // Write the Bluetooth controller's local name.
    case writeLocalName(WriteLocalNameCommand)
    
    // Set the Bluetooth controller's random address
    case lowEnergySetRandomAddress(LESetRandomAddressCommand)
    
    // Low Energy Scan
    case lowEnergyScan(LEScanCommand)
    
    // Clear the White List stored in the Controller.
    case lowEnergyClearWhiteList
    
    //  Cancel the LE_Create_Connection or LE_Extended_Create_Connection commands.
    case lowEnergyCreateConnectionCancel
    
    // Requests the list of the supported LE features for the Controller.
    case lowEnergyReadLocalSupportedFeatures
    
    // Controls which LE events are generated by the HCI for the Host.
    case lowEnergySetEventMask(LESetEventMaskCommand)
    
    // Reads the maximum size of the data portion of HCI LE ACL Data Packets sent from the Host to the Controller.
    case lowEnergySetReadBufferSize
    
    // Returns the current Channel_Map for the specified Connection_Handle.
    case lowEnergyReadChannelMap(LEReadChannelMapCommand)
    
    //  Adds a single device to the White List stored in the Controller.
    case lowEnergyAddDeviceToWhiteList(LEAddDeviceToWhiteListCommand)
    
    //  Removes a single device from the White List stored in the Controller.
    case lowEnergyRemoveDeviceToWhiteList(LERemoveDeviceToWhiteListCommand)
}

public extension Command {
    
    public func execute <Controller: BluetoothHostControllerInterface> (controller: Controller) throws {
        
        switch self {
        case let .lowEnergyScan(command): try command.execute(controller: controller)
        case .readLocalName: try ReadLocalNameCommand().execute(controller: controller)
        case let .writeLocalName(command): try command.execute(controller: controller)
        case let .iBeacon(command): try command.execute(controller: controller)
        case let .lowEnergySetRandomAddress(command): try command.execute(controller: controller)
        case .lowEnergyClearWhiteList: try LEClearWhiteListCommand().execute(controller: controller)
        case .lowEnergyCreateConnectionCancel: try LECreateConnectionCancelCommand().execute(controller: controller)
        case .lowEnergyReadLocalSupportedFeatures: try LEReadLocalSupportedFeaturesCommand().execute(controller: controller)
        case let .lowEnergySetEventMask(command): try command.execute(controller: controller)
        case .lowEnergySetReadBufferSize: try LEReadBufferSizeCommand().execute(controller: controller)
        case let .lowEnergyReadChannelMap(command): try command.execute(controller: controller)
        case let .lowEnergyAddDeviceToWhiteList(command): try command.execute(controller: controller)
        case let .lowEnergyRemoveDeviceToWhiteList(command): try command.execute(controller: controller)
        }
    }
}

public protocol CommandProtocol {
    
    static var commandType: CommandType { get }
    
    func execute <Controller: BluetoothHostControllerInterface> (controller: Controller) throws
}

public protocol ArgumentableCommand: CommandProtocol {
    
    associatedtype Option: OptionProtocol

    init(parameters: [Parameter<Option>]) throws
}

public extension ArgumentableCommand {
    
    init(arguments: [String]) throws {
        
        let parameters = try Parameter<Option>.parse(arguments: arguments)
        
        try self.init(parameters: parameters)
    }
}

public extension Command {
    
    public init(arguments: [String]) throws {
        
        guard let commandTypeString = arguments.first
            else { throw CommandError.noCommand }
        
        guard let commandType = CommandType(rawValue: commandTypeString)
            else { throw CommandError.invalidCommandType(commandTypeString) }
        
        let commandArguments = Array(arguments.dropFirst())
        
        switch commandType {
        case .lowEnergyScan:
            let command = try LEScanCommand(arguments: commandArguments)
            self = .lowEnergyScan(command)
        case .readLocalName:
            self = .readLocalName
        case .writeLocalName:
            let command = try WriteLocalNameCommand(arguments: commandArguments)
            self = .writeLocalName(command)
        case .iBeacon:
            let command = try iBeaconCommand(arguments: commandArguments)
            self = .iBeacon(command)
        case .lowEnergySetRandomAddress:
            let command = try LESetRandomAddressCommand(arguments: commandArguments)
            self = .lowEnergySetRandomAddress(command)
        case .lowEnergyClearWhiteList:
            self = .lowEnergyClearWhiteList
        case .lowEnergyCreateConnectionCancel:
            self = .lowEnergyCreateConnectionCancel
        case .lowEnergyReadLocalSupportedFeatures:
            self = .lowEnergyReadLocalSupportedFeatures
        case .lowEnergySetEventMask:
            let command = try LESetEventMaskCommand(arguments: commandArguments)
            self = .lowEnergySetEventMask(command)
        case .lowEnergySetReadBufferSize:
            self = .lowEnergySetReadBufferSize
        case .lowEnergyReadChannelMap:
            let command = try LEReadChannelMapCommand(arguments: commandArguments)
            self = .lowEnergyReadChannelMap(command)
        case .lowEnergyAddDeviceToWhiteList:
            let command = try LEAddDeviceToWhiteListCommand(arguments: commandArguments)
            self = .lowEnergyAddDeviceToWhiteList(command)
        case .lowEnergyRemoveDeviceToWhiteList:
            let command = try LERemoveDeviceToWhiteListCommand(arguments: commandArguments)
            self = .lowEnergyRemoveDeviceToWhiteList(command)
        }
    }
}
